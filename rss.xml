<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[zuzokim]]></title><description><![CDATA[zuzokim-devlog]]></description><link>https://zuzokim.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 29 Aug 2021 12:23:58 GMT</lastBuildDate><item><title><![CDATA[New blog start🍒]]></title><description><![CDATA[with Azure Static Web App + Github Actions + Gatsby Azure 정적 웹앱 + 깃헙 액션 + 개츠비로 블로그를 만들고 있어요! 아직 적응중이에요. 처음으로 블로그를 직접 만들어보았고, Github Action…]]></description><link>https://zuzokim.github.io/new-blog-start/</link><guid isPermaLink="false">https://zuzokim.github.io/new-blog-start/</guid><pubDate>Fri, 13 Aug 2021 07:26:03 GMT</pubDate><content:encoded>&lt;h3&gt;with Azure Static Web App + Github Actions + Gatsby&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Azure 정적 웹앱&lt;/strong&gt; + &lt;strong&gt;깃헙 액션&lt;/strong&gt; + 개츠비로 블로그를 만들고 있어요!&lt;/p&gt;
&lt;p&gt;아직 적응중이에요. 처음으로 블로그를 직접 만들어보았고, Github Action을 사용해 ci cd를 시도해봤어요. &lt;a href=&quot;https://github.com/devrel-kr/HackaLearn&quot;&gt;HackaLearn2021 Korea&lt;/a&gt; 해커톤에 참여한 것도 처음이에요. Microsoft Learn 챌린지가 좋은 가이드가 되어서 블로그를 만드는데 성공할 수 있었어요.&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/54028005/129464527-1c202ca1-64be-4097-8bfa-e74fc6ecfed4.png&quot; width=&quot;80%&quot;&gt;&lt;/center&gt;
&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/54028005/129464526-0dbeaffd-7185-4641-83b3-01c63be0b196.png&quot; width=&quot;80%&quot;&gt;&lt;/center&gt;
&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/54028005/129453216-43df588d-a8f6-4363-93cf-7bc31c9797ad.png&quot; width=&quot;80%&quot;&gt;&lt;/center&gt;
&lt;p&gt;핸즈온 랩 세션에 참여해서 정적 웹앱에 대해서 더 알아보고, 라이브코딩도 보면서 Azure와 깃헙액션을 다루는 방법을 익힐 수 있었어요. 저녁에 유튜브로 스트리밍되어서, 너무 너무 바쁜 와중에도 시간맞춰 들을 수 있어서 좋았어요. 역시 개발은 혼자하는 것보다 함께할 때 더 좋은 것 같아요. 서로 응원도 하고, 디버깅이 어렵거나 힘든 순간에 다른 개발자가 해결하는 모습을 보면서 배울 수 있었던 시간이었어요.&lt;/p&gt;
&lt;p&gt;다양한 분야와 도메인, 다양한 경력의 개발자들이 개인으로 팀으로 참여한 것 같은데, 다른 분들은 어떤 앱을 만들었는지 궁금하네요. 저는 이번에는 개인으로 참가하고, 개발 지식이 많지 않아서 대단한 앱을 만들지는 못했지만 이번 해카런을 계기로 더 공부해서 꾸준히 블로그를 운영해볼 생각이에요. 🧚‍♀️&lt;/p&gt;
&lt;div class=&quot;gatsby-resp-iframe-wrapper&quot; style=&quot;padding-bottom: 66.2%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem&quot; &gt; &lt;iframe src=&quot;https://www.facebook.com/plugins/post.php?href=https%3A%2F%2Fwww.facebook.com%2Fpermalink.php%3Fstory_fbid%3D757278641673227%26id%3D100021732936661&amp;amp;show_text=true&amp;amp;width=500&quot; style=&quot;border:none;overflow:hidden; position: absolute; top: 0; left: 0; width: 100%; height: 100%; &quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;true&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share&quot;&gt;&lt;/iframe&gt; &lt;/div&gt;</content:encoded></item><item><title><![CDATA[HACKALEARN KOREA 2021]]></title><description><![CDATA[이 참여한 HACKALEARN KOREA 2021가 궁금하다면 Check -> HackaLearn2021 Korea]]></description><link>https://zuzokim.github.io/hackalearn2021/</link><guid isPermaLink="false">https://zuzokim.github.io/hackalearn2021/</guid><pubDate>Fri, 14 Aug 2020 07:26:03 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;@zuzokim&lt;/code&gt; 이 참여한 HACKALEARN KOREA 2021가 궁금하다면&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Check -&gt; &lt;a href=&quot;https://github.com/devrel-kr/HackaLearn&quot;&gt;HackaLearn2021 Korea&lt;/a&gt;&lt;/h4&gt;</content:encoded></item><item><title><![CDATA[Static Web App]]></title><description><![CDATA[…]]></description><link>https://zuzokim.github.io/static-web-app/</link><guid isPermaLink="false">https://zuzokim.github.io/static-web-app/</guid><pubDate>Fri, 14 Aug 2020 00:26:03 GMT</pubDate><content:encoded>&lt;h3&gt;정적 웹 앱이란 ?&lt;/h3&gt;
&lt;p&gt;정적 웹은 말 그대로 움직이지 않는, 언제 접속해도 같은 리소스를 건네주는 웹사이트를 말한다.&lt;/p&gt;
&lt;p&gt;서버에서 매번 가공해서 제공하는 것이 아니라 미리 작성해놓은 코드들을 마치 진열대에 진열된 것처럼 꺼내 볼 수 있도록 하는 것이다.&lt;/p&gt;
&lt;p&gt;접속시마다 내용이 변할 필요가 없는 사이트들, 대표적인 예로 이런 블로그!가 있고, 회사나 학교 소개 사이트, 포트폴리오 사이트 등이 있겠다.&lt;sup id=&quot;fnref-1&quot;&gt;&lt;a href=&quot;#fn-1&quot; class=&quot;footnote-ref&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.yalco.kr/09_static_dynamic_web/&quot;&gt;https://www.yalco.kr/09_static_dynamic_web/&lt;/a&gt;&lt;/p&gt;
&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[JS 순수함수]]></title><description><![CDATA[순수함수란? 동일한 입력에 대해 항상 동일한 출력을 반환하는 함수
외부상태에 영향을 미치는 side effect…]]></description><link>https://zuzokim.github.io/js-pure-function/</link><guid isPermaLink="false">https://zuzokim.github.io/js-pure-function/</guid><pubDate>Wed, 12 Aug 2020 07:26:03 GMT</pubDate><content:encoded>&lt;h1&gt;순수함수란?&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;동일한 입력에 대해 항상 동일한 출력을 반환하는 함수
외부상태에 영향을 미치는 side effect가 없는 함수 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;아래는 순수함수의 예시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//순수함수&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//항상 같은 값을 출력함&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고 아래는 순수함수가 아닌 함수의 예시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//순수함수X&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//10&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 함수 밖 변수에 새로운 값을 재할당하면&lt;/span&gt;
c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 같은 함수임에도 결과가 달라짐&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//7&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//순수함수X&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//함수 내부에서 외부 변수 값을 재할당&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//함수를 실행하고 나면&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//외부 변수 D의 값이 5가 됨.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 잠깐 헷갈릴 수 있는 예시!
아래의 코드에서는 인자로 받은 객체에 아무 변화를 주지 않고 리턴했지만, &lt;strong&gt;순수함수가 아니다&lt;/strong&gt;. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//순수함수X&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 인자로 받은 객체를 그대로 리턴&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; obj2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 새로운 변수에 리턴된 객체를 할당&lt;/span&gt;

obj2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 새로운 객체 obj2의 a 값을 변경&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { a: 50 }&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { a: 50 } -- 기존 객체의 값도 변함!!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;왜냐! 새로운 객체에 함수를 실행하여 얻은 객체를 할당하고 그 값을 변경하면, 기존의 객체의 값도 변경된다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;기존 객체의 참조(reference) 값이 복사되어 새 변수에 할당된 것이고, 새 변수의 값을 변경하니, 같은 주소를 참조하고 있는 기존 객체의 값도 변해버리는 것!&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;함수형 프로그래밍&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게 불변성을 지향하는 순수함수와 함수 모듈화를 통해 &lt;strong&gt;함수형 프로그래밍&lt;/strong&gt;을 할 수 있다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;함수형 프로그래밍이란 ?
JS에서 함수가 일급함수임을 이용해 함수의 인자나 결과값에 함수를 사용하는 프로그래밍 패러다임이다. &lt;/li&gt;
&lt;li&gt;이때, 함수를 불변성을 지향하는 순수함수를 사용하며, 순수함수의 특징과 장점을 자연스럽게 살린 것이 함수형 프로그래밍의 핵심이다.&lt;/li&gt;
&lt;li&gt;완벽히 모든 함수를 순수함수로 모듈화할 수는 없겠지만, 함수형 프로그래밍을 하면 좋은 이유가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;동작과 결과값을 예측하기 쉬워진다.
side effect를 최소화할 수 있다.
함수 단위(모듈)의 코드 재사용이 편해진다.
디버깅이 수월하고 유지보수가 편리해진다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이때, &lt;strong&gt;불변성(immutability)&lt;/strong&gt;을 지향한다는 것에 대해 다시 짚어보면,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; obj1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; val&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 순수함수X&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;notPureFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;val &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;token comment&quot;&gt;// 리턴값은 일정하지만,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//함수로 들어온 인자의 상태(= 외부 상태)를 직접 변경함.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 순수함수&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;PureFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; val&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;val &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;PureFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;val&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 기존의 obj1의 val값은 그대로 10&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;val&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//  a에 새로 할당한 결과값은 15&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 예시코드와 같이 순수함수를 사용해 외부에 생성된 객체를 직접 건드리지 않고, &lt;strong&gt;새로운 객체를 리턴&lt;/strong&gt;하여 외부 객체의 값을 변화시킬 수 있다. 즉, &lt;strong&gt;생성된 객체의 값을 참조&lt;/strong&gt;만 하는 것이다. 이를 불변성(immutability)을 지킨다고 말한다.&lt;/p&gt;
&lt;h3&gt;순수함수의 특징, 불변성을 지켜야 하는 이유?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;객체(Object)는 참조(reference) 데이터 타입이다. 즉, 우리는 객체를 다룰 때 주소를 참조하여 값을 조회하여 사용한다.&lt;/li&gt;
&lt;li&gt;원시타입과 다르게 객체 타입의 상태(값)은 언제든지 변경이 가능한 값이며, 객체가 참조를 통해 공유되어 있다면 한 곳에서 값을 변경하면 의도치 않게 다른 곳에서 영향을 받는 문제가 생길 수 있다.&lt;/li&gt;
&lt;li&gt;따라서, 객체의 주소를 참조해 사용하고, 직접 값을 변화시키는 것은 주의해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;🔍&lt;/h2&gt;
&lt;p&gt;모든 함수를 모듈화하고, 순수함수로 작성할 수는 없겠지만 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;순수함수의 장점을 이해하고, &lt;/li&gt;
&lt;li&gt;불변성을 지키는 것이 필요한 이유를 알고 있다면 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;코드 로직의 흐름을 예측하고,
정확하게 데이터를 다룰 수 있다 !&lt;/p&gt;</content:encoded></item><item><title><![CDATA[JS 스코프]]></title><description><![CDATA[…]]></description><link>https://zuzokim.github.io/js-scope/</link><guid isPermaLink="false">https://zuzokim.github.io/js-scope/</guid><pubDate>Wed, 12 Aug 2020 07:26:03 GMT</pubDate><content:encoded>&lt;h2&gt;스코프를 이해하기 위한 컴퓨터 동작 과정 초간단 요약&lt;/h2&gt;
&lt;p&gt;스코프를 이해하기 위해서 컴퓨터가 동작하는 과정을 조금 알아볼 필요가 있다. 컴퓨터 동작 과정은 복잡하고 이를 정확히 알기 위해서는 컴퓨터 구조에 대해서 더 깊이 이해해야하지만, 우선은 스코프를 이해하는데 도움이 될 정도로만 아주아주 간단히만 요약정리해본다. &lt;/p&gt;
&lt;p&gt;컴퓨터는 코드를 읽어서 소프트웨어를 돌릴 때 필요한 자원들을 &lt;strong&gt;메모리&lt;/strong&gt;라는 작업대에 올려두고 일을 한다.&lt;/p&gt;
&lt;p&gt;하나의 소프트웨어, 프로세스가 운영체제로부터 할당 받은 메모리 공간이 있다고 치자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;코드영역: 전체 프로그램 코드가 저장되는 영역.&lt;/li&gt;
&lt;li&gt;데이터영역: C나 자바스크립트 등의 전역변수들이 저장되는 영역과 자바나 C# 등의 정적변수들이 저장되는 영역.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 두 가지 영역은 코드가 프로그램 실행시 사이즈가 확정이 되어서 프로세스가 종료될 때까지 수거되지 않는다.
&lt;del&gt;(이를 실행 컨텍스트가 생성,소멸된다고 표현한다.)&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;그런데, 모든 종류의 변수들이 이렇게 메모리의 고정된 영역을 차지하고 있으면 메모리 자리가 모자르게 될 것이다.&lt;/p&gt;
&lt;p&gt;그래서 특정 함수나 조건/반복문 등에서 쓰이는 변수들은 그 쓰임이 끝나면 시스템적으로나 수동으로, 혹은 가비지 컬렉터 등으로 관리가 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;스택영역&lt;/strong&gt;: 함수의 호출과 관계되는 지역 변수와 매개변수가 저장되는 영역.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게 메모리 공간의 스택 영역에 반복문이 도는 동안에 쓰이는 변수가 자리잡는다. 그리고 함수 호출이 완료되면 소멸된다.&lt;/p&gt;
&lt;p&gt;그리고 스택은 후입선출, 늦게 들어간 것부터 나오는 구조니까 코드의 순서, 함수 호출의 시점에 따라 변수들이 스택에 들어갔다가 나왔다가 하게 된다. 반복문 안쪽에 선언된 변수는 반복문이 실행될때마다 스택에 쌓였다가, 반복문이 종료되면 pop되는 것!&lt;/p&gt;
&lt;h2&gt;스택이 쌓이는 구조를 이해하면 스코프를 이해할 수 있다.&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;스코프 : &lt;del&gt;변수에 접근할 수 있는 범위&lt;/del&gt; 변수가 유효한 범위&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;전역(global) 스코프&lt;/strong&gt; : 최상단 전역에 선언되어있어 어느 곳에서든지 해당 변수에 접근할 수 있다는 의미&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;지역(local) 스코프&lt;/strong&gt; : 해당 지역에서만 접근할 수 있어 지역을 벗어난 곳에선 접근할 수 없다는 의미 (지역 스코프에 선언된 변수는 전역에서 참조가 불가능하다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;앞서 정리한 스택이 쌓이는 구조와 함께 스코프의 정의를 생각하면, 왜 함수 안쪽에 선언된 지역변수가 해당 스코프 바깥으로 나가지 못하는지 이해할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;스코프 바깥 영역이란 결국 그 변수가 메모리에 올려지기 전, 혹은 내려지고난 후의 시점&lt;/strong&gt;이라는 뜻이기 때문! &lt;/p&gt;
&lt;p&gt;JS에서 함수를 선언하면 함수를 선언할 때마다 새로운 스코프를 생성한다. 그러므로 함수 몸체에 선언한 변수는 해당 함수 몸체 안에서만 접근할 수 있고, 이걸 &lt;strong&gt;함수 스코프&lt;/strong&gt;(function-scoped)라고 한다. 함수 스코프가 바로 &lt;strong&gt;지역 스코프&lt;/strong&gt;의 예다.&lt;/p&gt;
&lt;h3&gt;스코프 체인이란?&lt;/h3&gt;
&lt;p&gt;자바스크립트 엔진은 식별자를 찾을 때 일단 자신이 속한 스코프에서 찾고 그 스코프에 식별자가 없으면 상위 스코프에서 다시 찾아 나간다. 이 현상을 스코프 체인 이라고 하며 스코프가 중첩되어있는 모든 상황에서 발생한다.&lt;/p&gt;
&lt;h3&gt;전역변수 사용을 최소화하는게 좋은 이유&lt;/h3&gt;
&lt;p&gt;스코프와 스코프 체인을 이해하고나면 전역변수와 지역변수를 필요에 따라 사용할 수 있게 되는데, 이 때 전역변수를 사용하게 되면 의도치 않게 변수 이름이 겹칠 경우 충돌이나 에러가 발생하기 때문에 주의해야 한다. 스코프 체인을 거듭하여 변수에 접근하는 경우에도 코드 가독성이 떨어질 수 있겠다.&lt;/p&gt;
&lt;h1&gt;🔍&lt;/h1&gt;
&lt;p&gt;코드블럭 단위로만 암기하듯(?) 당연한듯(?) 알고 있던 스코프와 전역변수, 지역변수에 대해서 메모리, 실행 컨텍스트, 스택 등의 컴퓨터 동작 과정과 함께 생각하니 훨 이해가 잘 된다.&lt;/p&gt;
&lt;p&gt;스코프에 대해 정리하면서 언급한 JS 함수 스코프에 대해서는 다음 글에서 var, let, const 키워드와 함께 다뤄보겠다 !&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Dummy post for now]]></title><description><![CDATA[This is a sample post with a large feature image up top and tons of text. Odio ad blue bottle vinyl, 90’s narwhal commodo bitters pour-over…]]></description><link>https://zuzokim.github.io/dummy/</link><guid isPermaLink="false">https://zuzokim.github.io/dummy/</guid><pubDate>Mon, 27 Jul 2020 07:26:03 GMT</pubDate><content:encoded>&lt;p&gt;This is a sample post with a large feature image&lt;sup id=&quot;fnref-1&quot;&gt;&lt;a href=&quot;#fn-1&quot; class=&quot;footnote-ref&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; up top and tons of text. Odio ad blue bottle vinyl, 90’s narwhal commodo bitters pour-over nostrud. Ugh est hashtag in, fingerstache adipisicing laboris esse Pinterest shabby chic Portland. Shoreditch bicycle rights anim, flexitarian laboris put a bird on it vinyl cupidatat narwhal. Hashtag artisan skateboard, flannel Bushwick nesciunt salvia aute fixie do plaid post-ironic dolor McSweeney’s. Cliche pour-over chambray nulla four loko skateboard sapiente hashtag.&lt;/p&gt;
&lt;p&gt;Vero laborum commodo occupy. Semiotics voluptate mumblecore pug. Cosby sweater ullamco quinoa ennui assumenda, sapiente occupy delectus lo-fi. Ea fashion axe Marfa cillum aliquip. Retro Bushwick keytar cliche. Before they sold out sustainable gastropub Marfa readymade, ethical Williamsburg skateboard brunch qui consectetur gentrify semiotics. Mustache cillum irony, fingerstache magna pour-over keffiyeh tousled selfies.&lt;/p&gt;
&lt;h2&gt;Cupidatat 90’s lo-fi authentic try-hard&lt;/h2&gt;
&lt;p&gt;In pug Portland incididunt mlkshk put a bird on it vinyl quinoa. Terry Richardson shabby chic +1, scenester Tonx excepteur tempor fugiat voluptate fingerstache aliquip nisi next level. Farm-to-table hashtag Truffaut, Odd Future ex meggings gentrify single-origin coffee try-hard 90’s.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sartorial hoodie&lt;/li&gt;
&lt;li&gt;Labore viral forage&lt;/li&gt;
&lt;li&gt;Tote bag selvage&lt;/li&gt;
&lt;li&gt;DIY exercitation et id ugh tumblr church-key&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Incididunt umami sriracha, ethical fugiat VHS ex assumenda yr irure direct trade. Marfa Truffaut bicycle rights, kitsch placeat Etsy kogi asymmetrical. Beard locavore flexitarian, kitsch photo booth hoodie plaid ethical readymade leggings yr.&lt;/p&gt;
&lt;p&gt;Aesthetic odio dolore, meggings disrupt qui readymade stumptown brunch Terry Richardson pour-over gluten-free. Banksy american apparel in selfies, biodiesel flexitarian organic meh wolf quinoa gentrify banjo kogi. Readymade tofu ex, scenester dolor umami fingerstache occaecat fashion axe Carles jean shorts minim. Keffiyeh fashion axe nisi Godard mlkshk dolore. Lomo you probably haven’t heard of them eu non, Odd Future Truffaut pug keytar meggings McSweeney’s Pinterest cred. Etsy literally aute esse, eu bicycle rights qui meggings fanny pack. Gentrify leggings pug flannel duis.&lt;/p&gt;
&lt;h2&gt;Forage occaecat cardigan qui&lt;/h2&gt;
&lt;p&gt;Fashion axe hella gastropub lo-fi kogi 90’s aliquip +1 veniam delectus tousled. Cred sriracha locavore gastropub kale chips, iPhone mollit sartorial. Anim dolore 8-bit, pork belly dolor photo booth aute flannel small batch. Dolor disrupt ennui, tattooed whatever salvia Banksy sartorial roof party selfies raw denim sint meh pour-over. Ennui eu cardigan sint, gentrify iPhone cornhole.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whatever velit occaecat quis deserunt gastropub, leggings elit tousled roof party 3 wolf moon kogi pug blue bottle ea. Fashion axe shabby chic Austin quinoa pickled laborum bitters next level, disrupt deep v accusamus non fingerstache.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Tote bag asymmetrical elit sunt. Occaecat authentic Marfa, hella McSweeney’s next level irure veniam master cleanse. Sed hoodie letterpress artisan wolf leggings, 3 wolf moon commodo ullamco. Anim occupy ea labore Terry Richardson. Tofu ex master cleanse in whatever pitchfork banh mi, occupy fugiat fanny pack Austin authentic. Magna fugiat 3 wolf moon, labore McSweeney’s sustainable vero consectetur. Gluten-free disrupt enim, aesthetic fugiat jean shorts trust fund keffiyeh magna try-hard.&lt;/p&gt;
&lt;h2&gt;Hoodie Duis&lt;/h2&gt;
&lt;p&gt;Actually salvia consectetur, hoodie duis lomo YOLO sunt sriracha. Aute pop-up brunch farm-to-table odio, salvia irure occaecat. Sriracha small batch literally skateboard. Echo Park nihil hoodie, aliquip forage artisan laboris. Trust fund reprehenderit nulla locavore. Stumptown raw denim kitsch, keffiyeh nulla twee dreamcatcher fanny pack ullamco 90’s pop-up est culpa farm-to-table. Selfies 8-bit do pug odio.&lt;/p&gt;
&lt;h3&gt;Thundercats Ho!&lt;/h3&gt;
&lt;p&gt;Fingerstache thundercats Williamsburg, deep v scenester Banksy ennui vinyl selfies mollit biodiesel duis odio pop-up. Banksy 3 wolf moon try-hard, sapiente enim stumptown deep v ad letterpress. Squid beard brunch, exercitation raw denim yr sint direct trade. Raw denim narwhal id, flannel DIY McSweeney’s seitan. Letterpress artisan bespoke accusamus, meggings laboris consequat Truffaut qui in seitan. Sustainable cornhole Schlitz, twee Cosby sweater banh mi deep v forage letterpress flannel whatever keffiyeh. Sartorial cred irure, semiotics ethical sed blue bottle nihil letterpress.&lt;/p&gt;
&lt;p&gt;Occupy et selvage squid, pug brunch blog nesciunt hashtag mumblecore skateboard yr kogi. Ugh small batch swag four loko. Fap post-ironic qui tote bag farm-to-table american apparel scenester keffiyeh vero, swag non pour-over gentrify authentic pitchfork. Schlitz scenester lo-fi voluptate, tote bag irony bicycle rights pariatur vero Vice freegan wayfarers exercitation nisi shoreditch. Chambray tofu vero sed. Street art swag literally leggings, Cosby sweater mixtape PBR lomo Banksy non in pitchfork ennui McSweeney’s selfies. Odd Future Banksy non authentic.&lt;/p&gt;
&lt;p&gt;Aliquip enim artisan dolor post-ironic. Pug tote bag Marfa, deserunt pour-over Portland wolf eu odio intelligentsia american apparel ugh ea. Sunt viral et, 3 wolf moon gastropub pug id. Id fashion axe est typewriter, mlkshk Portland art party aute brunch. Sint pork belly Cosby sweater, deep v mumblecore kitsch american apparel. Try-hard direct trade tumblr sint skateboard. Adipisicing bitters excepteur biodiesel, pickled gastropub aute veniam.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;Texture image courtesty of &lt;a href=&quot;http://www.lovetextures.com/&quot;&gt;Lovetextures&lt;/a&gt;&lt;/p&gt;
&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Dummy blog]]></title><description><![CDATA[HTML Elements Below is just about everything you’ll need to style in the theme. Check the source code to see the many embedded elements…]]></description><link>https://zuzokim.github.io/dummy blog/</link><guid isPermaLink="false">https://zuzokim.github.io/dummy blog/</guid><pubDate>Mon, 27 Jul 2020 07:26:03 GMT</pubDate><content:encoded>&lt;h2&gt;HTML Elements&lt;/h2&gt;
&lt;p&gt;Below is just about everything you’ll need to style in the theme. Check the source code to see the many embedded elements within paragraphs.&lt;/p&gt;
&lt;h1&gt;Heading 1&lt;/h1&gt;
&lt;h2&gt;Heading 2&lt;/h2&gt;
&lt;h3&gt;Heading 3&lt;/h3&gt;
&lt;h4&gt;Heading 4&lt;/h4&gt;
&lt;h5&gt;Heading 5&lt;/h5&gt;
&lt;h6&gt;Heading 6&lt;/h6&gt;
&lt;h3&gt;Body text&lt;/h3&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, test link adipiscing elit. &lt;strong&gt;This is strong&lt;/strong&gt;. Nullam dignissim convallis est. Quisque aliquam.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1440635592348-167b1b30296f?crop=entropy&amp;#x26;dpr=2&amp;#x26;fit=crop&amp;#x26;fm=jpg&amp;#x26;h=475&amp;#x26;ixjsv=2.1.0&amp;#x26;ixlib=rb-0.3.5&amp;#x26;q=50&amp;#x26;w=1250&quot; alt=&quot;Smithsonian Image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This is emphasized&lt;/em&gt;. Donec faucibus. Nunc iaculis suscipit dui. 53 = 125. Water is H2O. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl. The New York Times (That’s a citation). Underline.Maecenas ornare tortor. Donec sed tellus eget sapien fringilla nonummy. Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus.&lt;/p&gt;
&lt;p&gt;HTML and CSS are our tools. Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus. Praesent mattis, massa quis luctus fermentum, turpis mi volutpat justo, eu volutpat enim diam eget metus.&lt;/p&gt;
&lt;h3&gt;Blockquotes&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, test link adipiscing elit. Nullam dignissim convallis est. Quisque aliquam.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Tables&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Header 1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Header 2&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Header 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;cell 1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;cell 2&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;cell 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;cell 4&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;cell 5&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;cell 6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;List Types&lt;/h2&gt;
&lt;h3&gt;Ordered Lists&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Item one&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sub item one&lt;/li&gt;
&lt;li&gt;sub item two&lt;/li&gt;
&lt;li&gt;sub item three&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Item two&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Unordered Lists&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Item one&lt;/li&gt;
&lt;li&gt;Item two&lt;/li&gt;
&lt;li&gt;Item three&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>
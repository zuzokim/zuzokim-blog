{"componentChunkName":"component---src-templates-blog-post-js","path":"/js-pure-function/","result":{"data":{"site":{"siteMetadata":{"title":"zuzokim"}},"markdownRemark":{"id":"e16c1943-076c-5439-8eb3-699995bcf146","excerpt":"순수함수란? 동일한 입력에 대해 항상 동일한 출력을 반환하는 함수\n외부상태에 영향을 미치는 side effect…","html":"<h1>순수함수란?</h1>\n<blockquote>\n<p>동일한 입력에 대해 항상 동일한 출력을 반환하는 함수\n외부상태에 영향을 미치는 side effect가 없는 함수 </p>\n</blockquote>\n<p>아래는 순수함수의 예시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//순수함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//항상 같은 값을 출력함</span></code></pre></div>\n<p>그리고 아래는 순수함수가 아닌 함수의 예시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//순수함수X</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">add2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//10</span>\n\n<span class=\"token comment\">// 함수 밖 변수에 새로운 값을 재할당하면</span>\nc <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 같은 함수임에도 결과가 달라짐</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//7</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token comment\">//순수함수X</span>\n<span class=\"token keyword\">let</span> <span class=\"token constant\">D</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">add3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">D</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">//함수 내부에서 외부 변수 값을 재할당</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add3</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//함수를 실행하고 나면</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">D</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//외부 변수 D의 값이 5가 됨.</span></code></pre></div>\n<p>여기서 잠깐 헷갈릴 수 있는 예시!\n아래의 코드에서는 인자로 받은 객체에 아무 변화를 주지 않고 리턴했지만, <strong>순수함수가 아니다</strong>. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//순수함수X</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a <span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 인자로 받은 객체를 그대로 리턴</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 새로운 변수에 리턴된 객체를 할당</span>\n\nobj2<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 새로운 객체 obj2의 a 값을 변경</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { a: 50 }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { a: 50 } -- 기존 객체의 값도 변함!!</span></code></pre></div>\n<ul>\n<li>왜냐! 새로운 객체에 함수를 실행하여 얻은 객체를 할당하고 그 값을 변경하면, 기존의 객체의 값도 변경된다.</li>\n<li>\n<p><strong>기존 객체의 참조(reference) 값이 복사되어 새 변수에 할당된 것이고, 새 변수의 값을 변경하니, 같은 주소를 참조하고 있는 기존 객체의 값도 변해버리는 것!</strong></p>\n<h2>함수형 프로그래밍</h2>\n</li>\n</ul>\n<p>이렇게 불변성을 지향하는 순수함수와 함수 모듈화를 통해 <strong>함수형 프로그래밍</strong>을 할 수 있다. </p>\n<ul>\n<li>함수형 프로그래밍이란 ?\nJS에서 함수가 일급함수임을 이용해 함수의 인자나 결과값에 함수를 사용하는 프로그래밍 패러다임이다. </li>\n<li>이때, 함수를 불변성을 지향하는 순수함수를 사용하며, 순수함수의 특징과 장점을 자연스럽게 살린 것이 함수형 프로그래밍의 핵심이다.</li>\n<li>완벽히 모든 함수를 순수함수로 모듈화할 수는 없겠지만, 함수형 프로그래밍을 하면 좋은 이유가 있다.</li>\n</ul>\n<blockquote>\n<p>동작과 결과값을 예측하기 쉬워진다.\nside effect를 최소화할 수 있다.\n함수 단위(모듈)의 코드 재사용이 편해진다.\n디버깅이 수월하고 유지보수가 편리해진다.</p>\n</blockquote>\n<p>이때, <strong>불변성(immutability)</strong>을 지향한다는 것에 대해 다시 짚어보면,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> val<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 순수함수X</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">notPureFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  obj<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+=</span> b<span class=\"token punctuation\">;</span> \n  <span class=\"token comment\">// 리턴값은 일정하지만,</span>\n  <span class=\"token comment\">//함수로 들어온 인자의 상태(= 외부 상태)를 직접 변경함.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 순수함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">PureFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> val<span class=\"token operator\">:</span> obj<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+</span> b <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token function\">PureFunc</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 기존의 obj1의 val값은 그대로 10</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  a에 새로 할당한 결과값은 15</span></code></pre></div>\n<p>위의 예시코드와 같이 순수함수를 사용해 외부에 생성된 객체를 직접 건드리지 않고, <strong>새로운 객체를 리턴</strong>하여 외부 객체의 값을 변화시킬 수 있다. 즉, <strong>생성된 객체의 값을 참조</strong>만 하는 것이다. 이를 불변성(immutability)을 지킨다고 말한다.</p>\n<h3>순수함수의 특징, 불변성을 지켜야 하는 이유?</h3>\n<ul>\n<li>객체(Object)는 참조(reference) 데이터 타입이다. 즉, 우리는 객체를 다룰 때 주소를 참조하여 값을 조회하여 사용한다.</li>\n<li>원시타입과 다르게 객체 타입의 상태(값)은 언제든지 변경이 가능한 값이며, 객체가 참조를 통해 공유되어 있다면 한 곳에서 값을 변경하면 의도치 않게 다른 곳에서 영향을 받는 문제가 생길 수 있다.</li>\n<li>따라서, 객체의 주소를 참조해 사용하고, 직접 값을 변화시키는 것은 주의해야한다.</li>\n</ul>\n<h2>🔍</h2>\n<p>모든 함수를 모듈화하고, 순수함수로 작성할 수는 없겠지만 </p>\n<ul>\n<li>순수함수의 장점을 이해하고, </li>\n<li>불변성을 지키는 것이 필요한 이유를 알고 있다면 </li>\n</ul>\n<p>코드 로직의 흐름을 예측하고,\n정확하게 데이터를 다룰 수 있다 !</p>","frontmatter":{"title":"JS 순수함수","date":"August 12, 2020","description":"순수함수 = 동일한 입력에 대해 항상 동일한 출력을 반환하는 함수. 예시코드와 함께 이해하기"}}},"pageContext":{"slug":"/js-pure-function/","previous":{"fields":{"slug":"/js-scope/"},"frontmatter":{"title":"JS 스코프"}},"next":{"fields":{"slug":"/static-web-app/"},"frontmatter":{"title":"Static Web App"}}}},"staticQueryHashes":["3589320610","3966865564"]}